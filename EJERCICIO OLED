#include <stdio.h> // Librería para la entrada y salida estándar
#include <stdint.h> // Librería para tipos de datos de tamaño fijo
#include <string.h> // Librería para funciones de manipulación de cadenas
#include "pico/stdlib.h" // Librería estándar para la Raspberry Pi Pico
#include "hardware/i2c.h" // Librería para manejar la comunicación I2C

// Definiciones de pines I2C y dirección del dispositivo OLED con controlador SSD1306
#define I2C_PORT i2c1
#define I2C_SDA_PIN 2
#define I2C_SCL_PIN 3
#define OLED_ADDR 0x3C
#define SLEEPTIME 25 // Tiempo de espera en milisegundos

// Comandos para la configuración del SSD1306
#define OLED_CMD 0x00
#define OLED_DATA 0x40

typedef struct {
    i2c_inst_t *i2c_instance;
    uint8_t width;
    uint8_t height;
    uint8_t address;
    bool external_vcc;
} ssd1306_t;

void ssd1306_init(ssd1306_t *display, uint8_t width, uint8_t height, uint8_t address, i2c_inst_t *i2c_instance);
void ssd1306_clear(ssd1306_t *display);
void ssd1306_draw_string(ssd1306_t *display, uint8_t x, uint8_t y, uint8_t scale, const char *str);
void ssd1306_show(ssd1306_t *display);

static void ssd1306_send_command(ssd1306_t *display, uint8_t command) {
    uint8_t buf[2] = {0x00, command};
    i2c_write_blocking(display->i2c_instance, display->address, buf, 2, false);
}

void ssd1306_init(ssd1306_t *display, uint8_t width, uint8_t height, uint8_t address, i2c_inst_t *i2c_instance) {
    display->i2c_instance = i2c_instance;
    display->width = width;
    display->height = height;
    display->address = address;

    const uint8_t init_cmds[] = {
        0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40,
        0x8D, 0x14, 0x20, 0x00, 0xA1, 0xC8, 0xDA, 0x12,
        0x81, 0xCF, 0xD9, 0xF1, 0xDB, 0x40, 0xA4, 0xA6,
        0x2E, 0xAF
    };

    for (uint8_t i = 0; i < sizeof(init_cmds); i++) {
        ssd1306_send_command(display, init_cmds[i]);
    }
}

void ssd1306_clear(ssd1306_t *display) {
    uint8_t buf[display->width];
    memset(buf, 0x00, display->width);

    for (uint8_t i = 0; i < display->height / 8; i++) {
        ssd1306_send_command(display, 0xB0 + i);
        ssd1306_send_command(display, 0x00);
        ssd1306_send_command(display, 0x10);
        i2c_write_blocking(display->i2c_instance, display->address, buf, display->width, false);
    }
}

void ssd1306_draw_string(ssd1306_t *display, uint8_t x, uint8_t y, uint8_t scale, const char *str) {
    
}

void ssd1306_show(ssd1306_t *display) {
    // Esta función se usaría para actualizar la pantalla, si fuera necesario.
}

void arranque(void);
void impre(void);

int main() {
    stdio_init_all(); // Inicializa toda la entrada y salida estándar

    // Configuración de los pines I2C y arranque del sistema
    arranque();

    // Impresión en pantalla OLED
    impre();

    return 0;
}

// Configura los pines para la comunicación I2C
void arranque(void) {
    i2c_init(I2C_PORT, 400000); // Inicializa I2C en el puerto 1 a 400 kHz
    gpio_set_function(I2C_SDA_PIN, GPIO_FUNC_I2C); // Configura GPIO2 para la función I2C
    gpio_set_function(I2C_SCL_PIN, GPIO_FUNC_I2C); // Configura GPIO3 para la función I2C
    gpio_pull_up(I2C_SDA_PIN); // Activa la resistencia pull-up en GPIO2
    gpio_pull_up(I2C_SCL_PIN); // Activa la resistencia pull-up en GPIO3
}

// Imprime el nombre y apellidos en la pantalla OLED
void impre(void) {
    const char *words[] = {"Alejandri", "Pineda", "Aldair"}; // Array de cadenas con el nombre y apellidos

    ssd1306_t disp; // Estructura para el manejo de la pantalla OLED
    disp.external_vcc = false; // Configura el uso de la alimentación interna
    ssd1306_init(&disp, 128, 64, OLED_ADDR, I2C_PORT); // Inicializa la pantalla OLED con tamaño 128x64, dirección I2C 0x3C, y puerto I2C1
    ssd1306_clear(&disp); // Limpia la pantalla OLED

    for (;;) { // Bucle infinito
        // Recorre cada palabra en el array
        for (int i = 0; i < sizeof(words) / sizeof(char *); ++i) {
            ssd1306_draw_string(&disp, 8, 24, 2, words[i]); // Dibuja la cadena en la pantalla OLED
            ssd1306_show(&disp); // Muestra los datos en la pantalla OLED
            sleep_ms(500); // Espera 500 milisegundos
            ssd1306_clear(&disp); // Limpia la pantalla OLED
        }
    }
}
